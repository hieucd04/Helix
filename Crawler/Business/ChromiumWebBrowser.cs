using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Reflection;
using Helix.Crawler.Abstractions;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;

namespace Helix.Crawler
{
    public class ChromiumWebBrowser : IWebBrowser
    {
        ChromeDriver _chromeDriver;
        readonly Configurations _configurations;

        public event IdleEvent OnIdle;

        public ChromiumWebBrowser(Configurations configurations)
        {
            _configurations = configurations;
            Restart();
        }

        public void Dispose()
        {
            ReleaseUnmanagedResources();
            GC.SuppressFinalize(this);
        }

        public string Render(Uri uri)
        {
            var timedOut = true;
            for (var attemptCount = 0; attemptCount < 3; attemptCount++)
            {
                try
                {
                    _chromeDriver.Navigate().GoToUrl(uri);
                    timedOut = false;
                    break;
                }
                catch (WebDriverException webDriverException)
                {
                    if (webDriverException.InnerException.GetType() != typeof(WebException)) throw;
                    Restart();
                }
            }
            if (timedOut) throw new TimeoutException();

            OnIdle?.Invoke();
            return _chromeDriver.PageSource;
        }

        void ReleaseUnmanagedResources()
        {
            _chromeDriver?.Quit();
            _chromeDriver = null;
        }

        void Restart()
        {
            if (_chromeDriver != null)
            {
                _chromeDriver.Quit();
                _chromeDriver = null;
            }

            var workingDirectory = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
            var chromeDriverService = ChromeDriverService.CreateDefaultService(workingDirectory);
            chromeDriverService.HideCommandPromptWindow = true;

            var chromeOptions = new ChromeOptions { BinaryLocation = Path.Combine(workingDirectory, "chromium/chrome.exe") };
            if (_configurations.UseIncognitoWebBrowser) chromeOptions.AddArguments("--incognito");
            if (!_configurations.ShowWebBrowsers) chromeOptions.AddArguments("--headless");
            if (_configurations.HttpProxyPort > 0)
                chromeOptions.Proxy = new Proxy
                {
                    HttpProxy = $"http://{IPAddress.Loopback}:{_configurations.HttpProxyPort}",
                    FtpProxy = $"http://{IPAddress.Loopback}:{_configurations.HttpProxyPort}",
                    SslProxy = $"http://{IPAddress.Loopback}:{_configurations.HttpProxyPort}"
                };

            _chromeDriver = new ChromeDriver(chromeDriverService, chromeOptions);

            // TODO: Kill all processes and restart
            //create list of process id
            var driverProcessIds = new List<int> { chromeDriverService.ProcessId };

            //Get all the childs generated by the driver like conhost, chrome.exe...
            var mos = new System.Management.ManagementObjectSearcher($"Select * From Win32_Process Where ParentProcessID={chromeDriverService.ProcessId}");
            foreach (var mo in mos.Get())
            {
                var pid = Convert.ToInt32(mo["ProcessID"]);
                driverProcessIds.Add(pid);
            }

            ////Kill all
            //foreach (var id in driverProcessIds)
            //{
            //    System.Diagnostics.Process.GetProcessById(id).Kill();
            //}
        }

        ~ChromiumWebBrowser() { ReleaseUnmanagedResources(); }
    }
}